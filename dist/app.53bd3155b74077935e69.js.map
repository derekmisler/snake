{"version":3,"sources":["webpack:///webpack/bootstrap 53bd3155b74077935e69","webpack:///./constants/game.js","webpack:///./utils/store.js","webpack:///./components/game.js","webpack:///./components/elements.js","webpack:///./index.js","webpack:///./styles/app.scss","webpack:///./utils/helpers.js","webpack:///./utils/game.js","webpack:///./utils/keyboard.js"],"names":["width","height","snakeSize","SETTINGS","fps","food","color","size","x","y","snake","length","direction","board","id","numSquares","storeName","initialState","body","i","push","store","score","gameOver","updateStore","newState","getStore","newStore","Object","assign","window","sessionStorage","setItem","JSON","stringify","getItem","parse","gameBoard","element","document","createElement","setAttribute","clearBoard","ctx","fillStyle","clearRect","playGame","increment","headX","headY","snakeCrashed","collision","snakeAteFood","ateFood","pointScored","pop","unshift","renderSnake","renderFood","renderHeader","a","repeat","scoreClass","innerHTML","randomNumber","drawCircle","forEach","getElementById","appendChild","focus","canvas","getContext","addEventListener","run","state","hereWeGo","setInterval","clearInterval","min","max","Math","floor","random","beginPath","arc","PI","fill","snakeBoardCollision","hitRadius","snakeSelfCollision","xHit","yHit","newScore","el","parentNode","replaceChild","handleKeyEvents","pressedKey","e","which"],"mappings":"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","file":"app.53bd3155b74077935e69.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 53bd3155b74077935e69","const width = 800\nconst height = 600\nconst snakeSize = 5\n\n// Just some game settings. A lot of this will go into the inital store\nexport const SETTINGS = {\n  fps: 30,\n  food: {\n    color: '#F38181',\n    size: snakeSize,\n    x: 0,\n    y: 0\n  },\n  snake: {\n    color: '#756C83',\n    size: snakeSize,\n    length: snakeSize * 2,\n    direction: 'right'\n  },\n  board: {\n    id: 'game',\n    color: '#FBFBFB',\n    width: width,\n    height: height,\n    numSquares: (width / snakeSize) * (height / snakeSize)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./constants/game.js","const storeName = 'snakeStore'\nimport { SETTINGS } from 'constants/game'\n\nexport const initialState = () => {\n  const { snake, food } = SETTINGS\n  // Create the snake's initial size\n  snake.body = []\n  for (let i = snake.length; i > 0; i--) {\n    snake.body.push({ x: i, y: snake.size })\n  }\n  // Store any data that'll eventually change\n  const store = {\n    food,\n    snake,\n    score: 0,\n    gameOver: false\n  }\n  return store\n}\n\nexport const updateStore = (newState = {}) => {\n  // First, get the full store\n  const store = getStore()\n  // Next, merge the two\n  const newStore = Object.assign(store, newState)\n  // Last, replace store with the updated store\n  window.sessionStorage.setItem(storeName, JSON.stringify(newStore))\n}\n\nexport const getStore = () => {\n  // Get the store\n  const store = window.sessionStorage.getItem(storeName)\n  // Parse the store\n  if (store) return JSON.parse(store)\n  // Unless it's empty, then just return the inital state\n  return initialState()\n}\n\n\n// WEBPACK FOOTER //\n// ./utils/store.js","import { renderSnake, renderFood } from 'components/elements'\nimport { getStore, updateStore } from 'utils/store'\nimport { collision, ateFood, pointScored, gameOver } from 'utils/game'\nimport { SETTINGS } from 'constants/game'\n\n// This will draw the <canvas> with the right supplied settings.\nexport const gameBoard = () => {\n  const { id, height, width } = SETTINGS.board\n  const element = document.createElement('canvas')\n  element.setAttribute('id', id)\n  element.setAttribute('tabindex', 0)\n  element.setAttribute('height', height)\n  element.setAttribute('width', width)\n  return element\n}\n\n// This clears the board\nexport const clearBoard = ctx => {\n  const { color, width, height } = SETTINGS.board\n  ctx.fillStyle = color\n  ctx.clearRect(0, 0, width, height)\n}\n\n// This redraws the game board as the user moves the snake\nexport const playGame = ctx => {\n  const increment = SETTINGS.snake.size * 2\n  const { snake, food } = getStore()\n\n  // The head of the snake is the first item in the `snake.body` array\n  let headX = snake.body[0].x\n  let headY = snake.body[0].y\n\n  // The direction of the snake is determined by the `handleKeyEvents` function\n  if (snake.direction === 'right') headX += increment\n  else if (snake.direction === 'left') headX -= increment\n  else if (snake.direction === 'up') headY -= increment\n  else if (snake.direction === 'down') headY += increment\n\n  // Check if the head of the snake has either crashed or landed on food\n  const snakeCrashed = collision(headX, headY)\n  const snakeAteFood = ateFood(headX, headY, increment)\n\n  // If either of those are true, end the game or add a point\n  if (snakeCrashed) gameOver(ctx)\n  if (snakeAteFood) pointScored(headX, headY, ctx)\n  \n  // Otherwise, move the snake!\n  snake.body.pop()\n  snake.body.unshift({ x: headX, y: headY })\n\n  // Update the store with the new snake info, then redraw the snake and the food\n  updateStore({ snake })\n  renderSnake(ctx)\n  renderFood(ctx, food.x, food.y)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/game.js","import { SETTINGS } from 'constants/game'\nimport { randomNumber, drawCircle } from 'utils/helpers'\nimport { getStore, updateStore } from 'utils/store'\nimport { clearBoard } from 'components/game'\n\n// The header is also used to display the score\nexport const renderHeader = (score = 0) => {\n  const a = 'a'.repeat(score + 1)\n  const scoreClass = score > 0 ? 'score' : ''\n  const element = document.createElement('header')\n  element.innerHTML = `<h1 id='headline'>Sn<span class='${scoreClass}'>${a}</span>ke!</h1>`\n  return element\n}\n\n// This will either redraw the circle at it's current location,\n// or draw a new circle at a random location\nexport const renderFood = (ctx, x, y) => {\n  const { food } = getStore()\n  const { size, color } = SETTINGS.food\n  const { width, height } = SETTINGS.board\n  if (!x || !y) {\n    food.x = randomNumber(size, width - size),\n    food.y = randomNumber(size, height - size)\n    updateStore({ food })\n  }\n  drawCircle(ctx, x, y, size * 2, color)\n}\n\n// Clear previous snake, then redraw the current snake based on the size of the snake's body\nexport const renderSnake = ctx => {\n  clearBoard(ctx)\n  const { snake } = getStore()\n  snake.body.forEach(a => {\n    const { x, y } = a\n    drawCircle(ctx, x, y, snake.size, snake.color)\n  })\n  return ctx\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/elements.js","// Import our top-level sass file\nimport 'scss/app.scss'\n// Import components\nimport { playGame, gameBoard } from 'components/game'\nimport { renderHeader, renderSnake, renderFood } from 'components/elements'\n// Import settings\nimport { SETTINGS } from 'constants/game'\n// Import helpers\nimport { handleKeyEvents } from 'utils/keyboard'\nimport { getStore, updateStore, initialState } from 'utils/store'\n\n// Build initial structure/state\nupdateStore()\nconst element = document.getElementById('app')\nelement.appendChild(renderHeader(0))\nelement.appendChild(gameBoard(SETTINGS.board.id))\nelement.focus()\nconst canvas = document.getElementById(SETTINGS.board.id)\nconst ctx = canvas.getContext('2d')\n// Set up keyboard listener\nwindow.addEventListener('keydown', handleKeyEvents)\n// Game starts here\nconst run = state => {\n  updateStore(state)\n  renderSnake(ctx)\n  renderFood(ctx)\n  const hereWeGo = setInterval(() => {\n    playGame(ctx)\n    const { gameOver } = getStore()\n    if (gameOver) {\n      clearInterval(hereWeGo)\n      run(initialState())\n    }\n  }, SETTINGS.fps)\n}\n\nrun(initialState())\n\n\n// WEBPACK FOOTER //\n// ./index.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./styles/app.scss\n// module id = 5\n// module chunks = 0","// Useful for getting a random number within a range, like the board width x height\nexport const randomNumber = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n// Helpful for quickly drawing a circle\nexport const drawCircle = (ctx, x, y, size, color) => {\n  ctx.fillStyle = color\n  ctx.beginPath()\n  ctx.arc(x, y, size, 0, 2 * Math.PI)\n  ctx.fill()\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./utils/helpers.js","import { SETTINGS } from 'constants/game'\nimport { getStore, updateStore } from 'utils/store'\nimport { renderHeader, renderFood } from 'components/elements'\nimport { clearBoard } from 'components/game'\n\n// Check if the head of the snake is outside of the bounds of the board\nconst snakeBoardCollision = (x, y) => {\n  const hitRadius = SETTINGS.snake.size / 2\n  return x < hitRadius ||\n         y < hitRadius ||\n         x >= SETTINGS.board.width - hitRadius ||\n         y >= SETTINGS.board.height - hitRadius\n}\n\n// Check if the head of the snake is outside of the bounds of the board\nconst snakeSelfCollision = (x, y) => {\n  const { snake } = getStore()\n  const hitRadius = snake.size / 2\n  for (let i = 0; i < snake.size; i++) {\n    const xHit = x < snake.body[i].x + hitRadius &&\n                 x > snake.body[i].x - hitRadius\n    const yHit = y < snake.body[i].y + hitRadius &&\n                 y > snake.body[i].y - hitRadius\n    if (xHit && yHit) return true\n  }\n  return false\n}\n\n// If either of these are true, the snake has crashed!\nexport const collision = (x, y) => snakeBoardCollision(x, y) ||\n                                   snakeSelfCollision(x, y)\n\n// Check if the head of the snake is within the area of the food\nexport const ateFood = (x, y, size) => {\n  let { food } = getStore()\n  const hitRadius = (size + SETTINGS.snake.size / 2)\n  return x > food.x - hitRadius &&\n         x < food.x + hitRadius &&\n         y > food.y - hitRadius &&\n         y < food.y + hitRadius\n}\n\n// If a point is scored, reset some things and update other things\nexport const pointScored = (x, y, ctx) => {\n  let { score, snake, food } = getStore()\n  food.x = null\n  food.y = null\n  const newScore = score + 1\n  snake.body.push({ x: x * snake.size, y })\n  const el = document.getElementById('headline')\n  el.parentNode.replaceChild(renderHeader(newScore), el)\n  updateStore({ score: newScore, snake, food })\n  renderFood(ctx)\n}\n\n// If the snake crashes, clear the board, reset the score, and end the game\nexport const gameOver = ctx => {\n  clearBoard(ctx)\n  const el = document.getElementById('headline')\n  el.parentNode.replaceChild(renderHeader(0), el)\n  updateStore({ gameOver: true, score: 0 })\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./utils/game.js","import { getStore, updateStore } from 'utils/store'\n\n// Maps the key pressed with the direction of the snake\nexport const handleKeyEvents = e => {\n  const pressedKey = e.which\n  let { snake } = getStore()\n  switch (pressedKey) {\n  case 37:\n    snake.direction = 'left'\n    break\n  case 39:\n    snake.direction = 'right'\n    break\n  case 38:\n    snake.direction = 'up'\n    break\n  case 40:\n    snake.direction = 'down'\n    break\n  default:\n    break\n  }\n  updateStore({ snake })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./utils/keyboard.js"],"sourceRoot":""}